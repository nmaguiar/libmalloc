# Author: Nuno Aguiar
help:
  text   : Using a docker container builds either a libtcmalloc or libjemalloc for Alpine Linux or UBI. You can later use them be setting the LD_PRELOAD env variable and checking on /proc/pid/maps for the corresponding malloc library.
  expects:
  - name     : op
    desc     : The build operation to perform (e.g. buildUBIJE, buildUBITC, buildAlpineJE, buildAlpineTC, buildOracle8JE, buildOracle8TC, buildOracle9JE, buildOracle9TC)
    example  : buildUBITC
    mandatory: true
  - name     : arch
    desc     : The architecture to build with (e.g. amd64, arm64v8)
    example  : amd64
    mandatory: false
  - name     : output
    desc     : If defined the output libs will be placed on the corresponding folder provided (othewise a folder with the 'op' name will be used)
    example  : lib
    mandatory: false

init:
  alpine:
    imageTC: alpine
    buildTC: apk update && apk --no-cache add autoconf automake libtool make gcc musl-dev g++ git && git clone https://github.com/gperftools/gperftools && cd gperftools && sh autogen.sh && sh configure && make
    copyTC : mkdir /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && cp -a .libs/libtcmalloc*.so* /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && chmod a+rw /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}
    
    imageJE: alpine
    buildJE: apk update && apk --no-cache add autoconf automake libtool make gcc musl-dev git && git clone https://github.com/jemalloc/jemalloc && cd jemalloc && sh autogen.sh && sh configure && make
    copyJE : mkdir /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && cp -a lib/*.so* /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && chmod a+rw /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}

  oracle9:
    imageTC: oraclelinux:9
    buildTC: yum update && yum install -y -q autoconf automake libtool gcc gcc-c++ git make && git clone https://github.com/gperftools/gperftools && cd gperftools && sh autogen.sh && sh configure && make
    copyTC : mkdir /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && cp -a .libs/libtcmalloc*.so* /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && chmod a+rw /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}
      
    imageJE: oraclelinux:9
    buildJE: yum update && yum install -y -q autoconf automake libtool gcc make git && git clone https://github.com/jemalloc/jemalloc && cd jemalloc && sh autogen.sh && sh configure && make
    copyJE : mkdir /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && cp -a lib/*.so* /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && chmod a+rw /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}

  oracle8:
    imageTC: oraclelinux:8.8
    buildTC: yum update && yum install -y -q autoconf automake libtool gcc gcc-c++ git make && git clone https://github.com/gperftools/gperftools && cd gperftools && sh autogen.sh && sh configure && make
    copyTC : mkdir /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && cp -a .libs/libtcmalloc*.so* /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && chmod a+rw /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}
      
    imageJE: oraclelinux:8.8
    buildJE: yum update && yum install -y -q autoconf automake libtool gcc make git && git clone https://github.com/jemalloc/jemalloc && cd jemalloc && sh autogen.sh && sh configure && make
    copyJE : mkdir /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && cp -a lib/*.so* /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && chmod a+rw /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}

  ubi9:
    imageTC: registry.access.redhat.com/ubi9/ubi-minimal
    buildTC: microdnf install -y --nodocs autoconf automake libtool make gcc gcc-c++ git && git clone https://github.com/gperftools/gperftools && cd gperftools && sh autogen.sh && sh configure && make
    copyTC : mkdir /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && cp -a .libs/libtcmalloc*.so* /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && chmod a+rw /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}
    
    imageJE: registry.access.redhat.com/ubi9/ubi-minimal
    buildJE: microdnf install -y --nodocs autoconf automake libtool make gcc git && git clone https://github.com/jemalloc/jemalloc && cd jemalloc && sh autogen.sh && sh configure && make
    copyJE : mkdir /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && cp -a lib/*.so* /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && chmod a+rw /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}

  ubi8:
    imageTC: registry.access.redhat.com/ubi8/ubi-minimal
    buildTC: microdnf install -y --nodocs autoconf automake libtool make gcc gcc-c++ git && git clone https://github.com/gperftools/gperftools && cd gperftools && sh autogen.sh && sh configure && make
    copyTC : mkdir /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && cp -a .libs/libtcmalloc*.so* /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && chmod a+rw /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}
    
    imageJE: registry.access.redhat.com/ubi8/ubi-minimal
    buildJE: microdnf install -y --nodocs autoconf automake libtool make gcc git && git clone https://github.com/jemalloc/jemalloc && cd jemalloc && sh autogen.sh && sh configure && make
    copyJE : mkdir /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && cp -a lib/*.so* /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && chmod a+rw /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}

todo:
- Check for docker
- (optionOn   ): op
  ((todos    )): 
    buildUBI9JE   :
    - Build UBI 9 JE
    buildUBI9TC   :
    - Build UBI 9 TC
    buildUBI8JE  :
    - Build UBI 8 JE
    buildUBI8TC  :
    - Build UBI 8 TC
    buildAlpineJE:
    - Build Alpine JE
    buildAlpineTC:
    - Build Alpine TC
    buildOracle8TC:
    - Build Oracle 8 TC
    buildOracle8JE:
    - Build Oracle 8 JE
    buildOracle9TC:
    - Build Oracle 9 TC
    buildOracle9JE:
    - Build Oracle 9 JE

include:
- ojob.io/docker/_common

ojob:
  opacks      :
  - openaf: 20230907
  catch       : printErrnl("[" + job.name + "] "); if (isDef(exception.javaException)) exception.javaException.printStackTrace(); else printErr(exception)
  logToConsole: true   # to change when finished

jobs:
# ---------------
- name: Build lib
  lang: shell
  typeArgs:
    shellPrefix : build
  exec: |
    rm -rf {{name}}
    docker run --rm -i -v `pwd`:/output {{#if arch}}--platform linux/{{arch}}{{/if}} {{image}} /bin/sh -c "{{{cmd}}} && {{{copyCmd}}}"

# -----------------------
- name: Build Oracle 8 TC
  from:
  - (pass    ):
      image  : "{{init.oracle8.imageTC}}"
      cmd    : "{{{init.oracle8.buildTC}}}"
      copyCmd: "{{{$t init.oracle8.copyTC this}}}"
  - Build lib
  args:
    name: buildOracle8TC

# -----------------------
- name: Build Oracle 8 JE
  from:
  - (pass    ):
      image  : "{{init.oracle8.imageJE}}"
      cmd    : "{{{init.oracle8.buildJE}}}"
      copyCmd: "{{{$t init.oracle8.copyJE this}}}"
  - Build lib
  args:
    name: buildOracle8JE

# -----------------------
- name: Build Oracle 9 TC
  from:
  - (pass    ):
      image  : "{{init.oracle9.imageTC}}"
      cmd    : "{{{init.oracle9.buildTC}}}"
      copyCmd: "{{{$t init.oracle9.copyTC this}}}"
  - Build lib
  args:
    name: buildOracle9TC

# -----------------------
- name: Build Oracle 9 JE
  from:
  - (pass    ):
      image  : "{{init.oracle9.imageJE}}"
      cmd    : "{{{init.oracle9.buildJE}}}"
      copyCmd: "{{{$t init.oracle9.copyJE this}}}"
  - Build lib
  args:
    name: buildOracle9JE

# ------------------
- name: Build UBI 9 JE
  from:
  - (pass    ):
      image  : "{{init.ubi9.imageJE}}"
      cmd    : "{{{init.ubi9.buildJE}}}"
      copyCmd: "{{{$t init.ubi9.copyJE this}}}"
  - Build lib
  args:
    name: buildUBI9JE

# --------------------
- name: Build UBI 8 JE
  from:
  - (pass    ):
      image  : "{{init.ubi8.imageJE}}"
      cmd    : "{{{init.ubi8.buildJE}}}"
      copyCmd: "{{{$t init.ubi8.copyJE this}}}"
  - Build lib
  args:
    name: buildUBI8JE

# ------------------
- name: Build UBI 9 TC
  from:
  - (pass    ):
      image  : "{{init.ubi9.imageTC}}"
      cmd    : "{{{init.ubi9.buildTC}}}"
      copyCmd: "{{{$t init.ubi9.copyTC this}}}"
  - Build lib
  args:
    name: buildUBI9TC

# --------------------
- name: Build UBI 8 TC
  from:
  - (pass    ):
      image  : "{{init.ubi8.imageTC}}"
      cmd    : "{{{init.ubi8.buildTC}}}"
      copyCmd: "{{{$t init.ubi8.copyTC this}}}"
  - Build lib
  args:
    name: buildUBI8TC

# ---------------------
- name: Build Alpine JE
  from:
  - (pass    ):
      image  : "{{init.alpine.imageJE}}"
      cmd    : "{{{init.alpine.buildJE}}}"
      copyCmd: "{{{$t init.alpine.copyJE this}}}"
  - Build lib
  args:
    name: buildAlpineJE

# ---------------------
- name: Build Alpine TC
  from:
  - (pass    ):
      image  : "{{init.alpine.imageTC}}"
      cmd    : "{{{init.alpine.buildTC}}}"
      copyCmd: "{{{$t init.alpine.copyTC this}}}"
  - Build lib
  args:
    name: buildAlpineTC
