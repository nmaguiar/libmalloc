# Author: Nuno Aguiar
help:
  text   : Using a docker container builds either a libtcmalloc or libjemalloc for Alpine Linux or UBI. You can later use them be setting the LD_PRELOAD env variable and checking on /proc/pid/maps for the corresponding malloc library.
  expects:
  - name     : op
    desc     : The build operation to perform (e.g. buildUBIJE, buildUBITC, buildAlpineJE, buildAlpineTC, buildOracle8JE, buildOracle8TC, buildOracle9JE, buildOracle9TC)
    example  : buildUBITC
    mandatory: true
  - name     : arch
    desc     : The architecture to build with (e.g. amd64, arm64v8)
    example  : amd64
    mandatory: false
  - name     : output
    desc     : If defined the output libs will be placed on the corresponding folder provided (othewise a folder with the 'op' name will be used)
    example  : lib
    mandatory: false

init:
  alpine:
    imageTC: alpine
    buildTC: apk update && apk --no-cache add autoconf automake libtool make gcc musl-dev g++ git patch && git clone https://github.com/gperftools/gperftools && cd gperftools && sh autogen.sh && sh configure && make
    copyTC : mkdir /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && cp -a .libs/libtcmalloc*.so* /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && chmod a+rw /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}
    testTC : apk update && apk --no-cache add curl tar gzip openjdk17 gcc bash && curl https://ojob.io/get.sh | sh && LD_PRELOAD=/output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}/libtcmalloc_minimal.so oaf/oaf -c 'exit(\$sh(\"grep libtcmalloc_minimal.so /proc/\"+getPid()+\"/maps\").get(0).exitcode)'

    imageJE: alpine
    buildJE: apk update && apk --no-cache add autoconf automake libtool make gcc musl-dev git patch && git clone https://github.com/jemalloc/jemalloc && cd jemalloc && sh autogen.sh && sh configure && make
    copyJE : mkdir /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && cp -a lib/*.so* /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && chmod a+rw /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}
    testJE : apk update && apk --no-cache add curl tar gzip openjdk17 bash && curl https://ojob.io/get.sh | sh && LD_PRELOAD=/output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}/libjemalloc.so oaf/oaf -c 'exit(\$sh(\"grep libjemalloc.so /proc/\"+getPid()+\"/maps\").get(0).exitcode)'

    imageMI: alpine
    buildMI: apk update && apk --no-cache add autoconf automake libtool make gcc musl-dev g++ git patch cmake && git clone https://github.com/microsoft/mimalloc -b dev2 && cd mimalloc && mkdir -p out/release && cd out/release && cmake ../.. && make -j
    copyMI : mkdir /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && cp -a /mimalloc/out/release/*.so* /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && chmod a+rw /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}
    testMI : yum -y -q update && yum install -y -q curl && curl https://ojob.io/get.sh | sh && LD_PRELOAD=/output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}/libmimalloc.so oaf/oaf -c 'exit(\$sh(\"grep libmimalloc.so /proc/\"+getPid()+\"/maps\").get(0).exitcode)'

  oracle9:
    imageTC: oraclelinux:9
    buildTC: yum -y -q update && yum install -y -q autoconf automake libtool gcc gcc-c++ git make patch && git clone https://github.com/gperftools/gperftools && cd gperftools && sh autogen.sh && sh configure && make
    copyTC : mkdir /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && cp -a .libs/libtcmalloc*.so* /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && chmod a+rw /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}
    testTC : yum -y -q update && yum install -y -q curl && curl https://ojob.io/get.sh | sh && LD_PRELOAD=/output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}/libtcmalloc_minimal.so oaf/oaf -c 'exit(\$sh(\"grep libtcmalloc_minimal.so /proc/\"+getPid()+\"/maps\").get(0).exitcode)'

    imageJE: oraclelinux:9
    buildJE: yum -y -q update && yum install -y -q autoconf automake libtool gcc make git patch && git clone https://github.com/jemalloc/jemalloc && cd jemalloc && sh autogen.sh && sh configure && make
    copyJE : mkdir /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && cp -a lib/*.so* /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && chmod a+rw /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}
    testJE : yum -y -q update && yum install -y -q curl && curl https://ojob.io/get.sh | sh && LD_PRELOAD=/output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}/libjemalloc.so oaf/oaf -c 'exit(\$sh(\"grep libjemalloc.so /proc/\"+getPid()+\"/maps\").get(0).exitcode)'

    imageMI: oraclelinux:9 
    buildMI: yum -y -q update && yum install -y -q autoconf automake libtool gcc gcc-c++ cmake git make patch && git clone https://github.com/microsoft/mimalloc && cd mimalloc && mkdir -p out/release && cd out/release && cmake ../.. && make
    copyMI : mkdir /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && cp -a /mimalloc/out/release/*.so* /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && chmod a+rw /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}
    testMI : yum -y -q update && yum install -y -q curl && curl https://ojob.io/get.sh | sh && LD_PRELOAD=/output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}/libmimalloc.so oaf/oaf -c 'exit(\$sh(\"grep libmimalloc.so /proc/\"+getPid()+\"/maps\").get(0).exitcode)'

  oracle8:
    imageTC: oraclelinux:8.8
    buildTC: yum -y -q update && yum install -y -q autoconf automake libtool gcc gcc-c++ git make patch && git clone https://github.com/gperftools/gperftools && cd gperftools && sh autogen.sh && LDFLAGS="-lpthread" sh configure && make
    copyTC : mkdir /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && cp -a .libs/libtcmalloc*.so* /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && chmod a+rw /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}
    testTC : yum -y -q update && yum install -y -q curl && curl https://ojob.io/get.sh | sh && LD_PRELOAD=/output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}/libtcmalloc_minimal.so oaf/oaf -c 'exit(\$sh(\"grep libtcmalloc_minimal.so /proc/\"+getPid()+\"/maps\").get(0).exitcode)'

    imageJE: oraclelinux:8.8
    buildJE: yum -y -q update && yum install -y -q autoconf automake libtool gcc make git patch && git clone https://github.com/jemalloc/jemalloc && cd jemalloc && sh autogen.sh && sh configure && make
    copyJE : mkdir /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && cp -a lib/*.so* /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && chmod a+rw /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}
    testJE : yum -y -q update && yum install -y -q curl && curl https://ojob.io/get.sh | sh && LD_PRELOAD=/output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}/libjemalloc.so oaf/oaf -c 'exit(\$sh(\"grep libjemalloc.so /proc/\"+getPid()+\"/maps\").get(0).exitcode)'

    imageMI: oraclelinux:8.8
    buildMI: yum -y -q update && yum install -y -q autoconf automake libtool gcc gcc-c++ cmake git make patch && git clone https://github.com/microsoft/mimalloc && cd mimalloc && mkdir -p out/release && cd out/release && cmake ../.. && make
    copyMI : mkdir /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && cp -a /mimalloc/out/release/*.so* /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && chmod a+rw /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}
    testMI : yum -y -q update && yum install -y -q curl && curl https://ojob.io/get.sh | sh && LD_PRELOAD=/output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}/libmimalloc.so oaf/oaf -c 'exit(\$sh(\"grep libmimalloc.so /proc/\"+getPid()+\"/maps\").get(0).exitcode)'

  oracle7:
    imageTC: oraclelinux:7
    buildTC: yum -y -q update && yum install -y -q autoconf automake libtool gcc gcc-c++ git make file patch && git clone https://github.com/gperftools/gperftools && cd gperftools && sh autogen.sh && sh configure && make
    copyTC : mkdir /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && cp -a .libs/libtcmalloc*.so* /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && chmod a+rw /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}
    testTC : yum -y -q update && yum install -y -q curl && curl https://ojob.io/get.sh | sh && LD_PRELOAD=/output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}/libtcmalloc_minimal.so oaf/oaf -c 'exit(\$sh(\"grep libtcmalloc_minimal.so /proc/\"+getPid()+\"/maps\").get(0).exitcode)'
      
    imageJE: oraclelinux:7
    buildJE: yum -y -q update && yum install -y -q autoconf automake libtool gcc make git patch && git clone https://github.com/jemalloc/jemalloc && cd jemalloc && sh autogen.sh && sh configure && make
    copyJE : mkdir /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && cp -a lib/*.so* /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && chmod a+rw /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}   
    testJE : yum -y -q update && yum install -y -q curl && curl https://ojob.io/get.sh | sh && LD_PRELOAD=/output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}/libjemalloc.so oaf/oaf -c 'exit(\$sh(\"grep libjemalloc.so /proc/\"+getPid()+\"/maps\").get(0).exitcode)'

  ubi9:
    imageTC: registry.access.redhat.com/ubi9/ubi-minimal
    buildTC: microdnf install -y --nodocs autoconf automake libtool make gcc gcc-c++ git patch && git clone https://github.com/gperftools/gperftools && cd gperftools && sh autogen.sh && sh configure && make
    copyTC : mkdir /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && cp -a .libs/libtcmalloc*.so* /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && chmod a+rw /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}
    testTC : microdnf install -y --nodocs findutils tar gzip && curl https://ojob.io/get.sh | sh && LD_PRELOAD=/output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}/libtcmalloc_minimal.so oaf/oaf -c 'exit(\$sh(\"grep libtcmalloc_minimal.so /proc/\"+getPid()+\"/maps\").get(0).exitcode)'
    
    imageJE: registry.access.redhat.com/ubi9/ubi-minimal
    buildJE: microdnf install -y --nodocs autoconf automake libtool make gcc git patch && git clone https://github.com/jemalloc/jemalloc && cd jemalloc && sh autogen.sh && sh configure && make
    copyJE : mkdir /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && cp -a lib/*.so* /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && chmod a+rw /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}
    testJE : microdnf install -y --nodocs findutils tar gzip && curl https://ojob.io/get.sh | sh && LD_PRELOAD=/output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}/libjemalloc.so oaf/oaf -c 'exit(\$sh(\"grep libjemalloc.so /proc/\"+getPid()+\"/maps\").get(0).exitcode)'

    imageMI: registry.access.redhat.com/ubi9/ubi-minimal
    buildMI: microdnf install -y --nodocs autoconf automake libtool make cmake gcc gcc-c++ git patch && git clone https://github.com/microsoft/mimalloc && cd mimalloc && mkdir -p out/release && cd out/release && cmake ../.. && make
    copyMI : mkdir /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && cp -a /mimalloc/out/release/*.so* /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && chmod a+rw /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}
    testMI : microdnf install -y --nodocs findutils tar gzip && curl https://ojob.io/get.sh | sh && LD_PRELOAD=/output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}/libmimalloc.so oaf/oaf -c 'exit(\$sh(\"grep libmimalloc.so /proc/\"+getPid()+\"/maps\").get(0).exitcode)'

  ubi8:
    imageTC: registry.access.redhat.com/ubi8/ubi-minimal
    buildTC: microdnf install -y --nodocs autoconf automake libtool make gcc gcc-c++ git patch && git clone https://github.com/gperftools/gperftools && cd gperftools && sh autogen.sh && sh configure && make
    copyTC : mkdir /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && cp -a .libs/libtcmalloc*.so* /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && chmod a+rw /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}
    testTC : microdnf install -y --nodocs findutils tar gzip && curl https://ojob.io/get.sh | sh && LD_PRELOAD=/output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}/libtcmalloc_minimal.so oaf/oaf -c 'exit(\$sh(\"grep libtcmalloc_minimal.so /proc/\"+getPid()+\"/maps\").get(0).exitcode)'

    imageJE: registry.access.redhat.com/ubi8/ubi-minimal
    buildJE: microdnf install -y --nodocs autoconf automake libtool make gcc git patch && git clone https://github.com/jemalloc/jemalloc && cd jemalloc && sh autogen.sh && sh configure && make
    copyJE : mkdir /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && cp -a lib/*.so* /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && chmod a+rw /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}
    testJE : microdnf install -y --nodocs findutils tar gzip && curl https://ojob.io/get.sh | sh && LD_PRELOAD=/output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}/libjemalloc.so oaf/oaf -c 'exit(\$sh(\"grep libjemalloc.so /proc/\"+getPid()+\"/maps\").get(0).exitcode)'

    imageMI: registry.access.redhat.com/ubi8/ubi-minimal
    buildMI: microdnf install -y --nodocs autoconf automake libtool make cmake gcc gcc-c++ git patch && git clone https://github.com/microsoft/mimalloc && cd mimalloc && mkdir -p out/release && cd out/release && cmake ../.. && make
    copyMI : mkdir /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && cp -a /mimalloc/out/release/*.so* /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && chmod a+rw /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}
    testMI : microdnf install -y --nodocs findutils tar gzip && curl https://ojob.io/get.sh | sh && LD_PRELOAD=/output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}/libmimalloc.so oaf/oaf -c 'exit(\$sh(\"grep libmimalloc.so /proc/\"+getPid()+\"/maps\").get(0).exitcode)'

  ubi7:
    imageTC: registry.access.redhat.com/ubi7/ubi-minimal
    buildTC: microdnf install -y --nodocs autoconf automake libtool make gcc gcc-c++ git patch && git clone https://github.com/gperftools/gperftools && cd gperftools && sh autogen.sh && sh configure && make
    copyTC : mkdir /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && cp -a .libs/libtcmalloc*.so* /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && chmod a+rw /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}
    testTC : microdnf install -y --nodocs findutils tar gzip && curl https://ojob.io/get.sh | sh && LD_PRELOAD=/output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}/libtcmalloc_minimal.so oaf/oaf -c 'exit(\$sh(\"grep libtcmalloc_minimal.so /proc/\"+getPid()+\"/maps\").get(0).exitcode)'

    imageJE: registry.access.redhat.com/ubi7/ubi-minimal
    buildJE: microdnf install -y --nodocs autoconf automake libtool make gcc git patch && git clone https://github.com/jemalloc/jemalloc && cd jemalloc && sh autogen.sh && sh configure && make
    copyJE : mkdir /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && cp -a lib/*.so* /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && chmod a+rw /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}
    testJE : microdnf install -y --nodocs findutils tar gzip && curl https://ojob.io/get.sh | sh && LD_PRELOAD=/output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}/libjemalloc.so oaf/oaf -c 'exit(\$sh(\"grep libjemalloc.so /proc/\"+getPid()+\"/maps\").get(0).exitcode)'

  ubuntu:
    imageTC: ubuntu:plucky
    buildTC: apt-get update && apt-get install -y autoconf automake libtool make gcc g++ git patch && git clone https://github.com/gperftools/gperftools && cd gperftools && sh autogen.sh && sh configure && make
    copyTC : mkdir /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && cp -a .libs/libtcmalloc*.so* /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && chmod a+rw /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}
    testTC : apt-get update && apt-get install -y curl && curl https://ojob.io/get.sh | sh && LD_PRELOAD=/output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}/libtcmalloc_minimal.so oaf/oaf -c 'exit(\$sh(\"grep libtcmalloc_minimal.so /proc/\"+getPid()+\"/maps\").get(0).exitcode)'

    imageJE: ubuntu:plucky
    buildJE: apt-get update && apt-get install -y autoconf automake libtool make gcc git patch && git clone https://github.com/jemalloc/jemalloc && cd jemalloc && sh autogen.sh && sh configure && make
    copyJE : mkdir /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && cp -a lib/*.so* /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && chmod a+rw /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}
    testJE : apt-get update && apt-get install -y curl && curl https://ojob.io/get.sh | sh && LD_PRELOAD=/output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}/libjemalloc.so oaf/oaf -c 'exit(\$sh(\"grep libjemalloc.so /proc/\"+getPid()+\"/maps\").get(0).exitcode)'

    imageMI: ubuntu:plucky
    buildMI: apt-get update && apt-get install -y autoconf automake libtool cmake make gcc g++ git patch && git clone https://github.com/microsoft/mimalloc && cd mimalloc && mkdir -p out/release && cd out/release && cmake ../.. && make
    copyMI : mkdir /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && cp -a /mimalloc/out/release/*.so* /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && chmod a+rw /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}
    testMI : apt-get update && apt-get install -y curl && curl https://ojob.io/get.sh | sh && LD_PRELOAD=/output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}/libtcmalloc_minimal.so oaf/oaf -c 'exit(\$sh(\"grep libtcmalloc_minimal.so /proc/\"+getPid()+\"/maps\").get(0).exitcode)'

  ubuntuBionic:
    imageTC: ubuntu:bionic
    buildTC: apt-get update && apt-get install -y autoconf automake libtool make gcc g++ git patch && git clone https://github.com/gperftools/gperftools && cd gperftools && sh autogen.sh && sh configure && make
    copyTC : mkdir /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && cp -a .libs/libtcmalloc*.so* /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && chmod a+rw /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}
    testTC : apt-get update && apt-get install -y curl && curl https://ojob.io/get.sh | sh && LD_PRELOAD=/output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}/libtcmalloc_minimal.so oaf/oaf -c 'exit(\$sh(\"grep libtcmalloc_minimal.so /proc/\"+getPid()+\"/maps\").get(0).exitcode)'

    imageJE: ubuntu:bionic
    buildJE: apt-get update && apt-get install -y autoconf automake libtool make gcc git patch && git clone https://github.com/jemalloc/jemalloc && cd jemalloc && sh autogen.sh && sh configure && make
    copyJE : mkdir /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && cp -a lib/*.so* /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && chmod a+rw /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}
    testJE : apt-get update && apt-get install -y curl && curl https://ojob.io/get.sh | sh && LD_PRELOAD=/output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}/libjemalloc.so oaf/oaf -c 'exit(\$sh(\"grep libjemalloc.so /proc/\"+getPid()+\"/maps\").get(0).exitcode)'

  ubuntuFocal:
    imageTC: ubuntu:focal
    buildTC: apt-get update && apt-get install -y autoconf automake libtool make gcc g++ git patch && git clone https://github.com/gperftools/gperftools && cd gperftools && sh autogen.sh && sh configure && make
    copyTC : mkdir /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && cp -a .libs/libtcmalloc*.so* /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && chmod a+rw /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}
    testTC : apt-get update && apt-get install -y curl && curl https://ojob.io/get.sh | sh && LD_PRELOAD=/output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}/libtcmalloc_minimal.so oaf/oaf -c 'exit(\$sh(\"grep libtcmalloc_minimal.so /proc/\"+getPid()+\"/maps\").get(0).exitcode)'

    imageJE: ubuntu:focal
    buildJE: apt-get update && apt-get install -y autoconf automake libtool make gcc git patch && git clone https://github.com/jemalloc/jemalloc && cd jemalloc && sh autogen.sh && sh configure && make
    copyJE : mkdir /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && cp -a lib/*.so* /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}} && chmod a+rw /output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}
    testJE : apt-get update && apt-get install -y curl && curl https://ojob.io/get.sh | sh && LD_PRELOAD=/output/{{#if output}}{{output}}{{else}}{{name}}{{/if}}/libjemalloc.so oaf/oaf -c 'exit(\$sh(\"grep libjemalloc.so /proc/\"+getPid()+\"/maps\").get(0).exitcode)'

todo:
- Check for docker
- (optionOn   ): op
  ((todos    )): 
    buildUBI9JE   :
    - Build UBI 9 JE
    buildUBI9TC   :
    - Build UBI 9 TC
    buildUBI9MI  :
    - Build UBI 9 MI
    buildUBI8JE  :
    - Build UBI 8 JE
    buildUBI8TC  :
    - Build UBI 8 TC
    buildUBI8MI  : 
    - Build UBI 8 MI
    buildUBI7JE  :
    - Build UBI 7 JE
    buildAlpineJE:
    - Build Alpine JE
    buildAlpineTC:
    - Build Alpine TC
    buildAlpineMI:
    - Build Alpine MI
    buildOracle8TC:
    - Build Oracle 8 TC
    buildOracle8JE:
    - Build Oracle 8 JE
    buildOracle8MI:
    - Build Oracle 8 MI
    buildOracle7TC:
    - Build Oracle 7 TC
    buildOracle7JE:
    - Build Oracle 7 JE
    buildOracle9TC:
    - Build Oracle 9 TC
    buildOracle9JE:
    - Build Oracle 9 JE
    buildOracle9MI:
    - Build Oracle 9 MI
    buildUbuntuTC:
    - Build Ubuntu TC
    buildUbuntuJE:
    - Build Ubuntu JE
    buildUbuntuMI:
    - Build Ubuntu MI
    buildUbuntuBionicTC:
    - Build Ubuntu Focal TC
    buildUbuntuBionicJE:
    - Build Ubuntu Focal JE
    buildUbuntuFocalTC:
    - Build Ubuntu Focal TC
    buildUbuntuFocalJE:
    - Build Ubuntu Focal JE

include:
- ojob.io/docker/_common

ojob:
  opacks      :
  - openaf: 20230907
  catch       : printErrnl("[" + job.name + "] "); $err(exception, __ ,true,job.exec) 
  logToConsole: true   # to change when finished

jobs:
# ---------------
- name: Build lib
  lang: shell
  typeArgs:
    shellPrefix : build
  exec: | #shell
    rm -rf {{name}}
    docker run --rm -i -v `pwd`:/output {{#if arch}}--platform linux/{{arch}}{{/if}} {{image}} /bin/sh -c "{{{cmd}}} && {{{copyCmd}}}"

# --------------
- name: Test lib
  lang: shell
  typeArgs:
    shellPrefix : test
  exec: | #shell
    docker run --rm -i -v `pwd`:/output {{#if arch}}--platform linux/{{arch}}{{/if}} {{image}} /bin/sh -c "{{{testCmd}}}"

# ---------------------
- name: Build Ubuntu TC
  from:
  - (pass    ):
      image  : "{{init.ubuntu.imageTC}}"
      cmd    : "{{{init.ubuntu.buildTC}}}"
      copyCmd: "{{{$t init.ubuntu.copyTC this}}}"
      testCmd: "{{{$t init.ubuntu.testTC this}}}"
  - Build lib
  - Test lib
  args:
    name: buildUbuntuTC

# ---------------------
- name: Build Ubuntu JE
  from:
  - (pass    ):
      image  : "{{init.ubuntu.imageJE}}"
      cmd    : "{{{init.ubuntu.buildJE}}}"
      copyCmd: "{{{$t init.ubuntu.copyJE this}}}"
      testCmd: "{{{$t init.ubuntu.testJE this}}}"
  - Build lib
  - Test lib
  args:
    name: buildUbuntuJE

# ---------------------
- name: Build Ubuntu MI
  from:
  - (pass    ):
      image  : "{{init.ubuntu.imageMI}}"
      cmd    : "{{{init.ubuntu.buildMI}}}"
      copyCmd: "{{{$t init.ubuntu.copyMI this}}}"
      testCmd: "{{{$t init.ubuntu.testMI this}}}"
  - Build lib
  - Test lib
  args:
    name: buildUbuntuMI

# ----------------------------
- name: Build Ubuntu Bionic TC
  from:
  - (pass    ):
      image  : "{{init.ubuntuBionic.imageTC}}"
      cmd    : "{{{init.ubuntuBionic.buildTC}}}"
      copyCmd: "{{{$t init.ubuntuBionic.copyTC this}}}"
      testCmd: "{{{$t init.ubuntuBionic.testTC this}}}"
  - Build lib
  - Test lib
  args:
    name: buildUbuntuBionicTC

# ----------------------------
- name: Build Ubuntu Bionic JE
  from:
  - (pass    ):
      image  : "{{init.ubuntuBionic.imageJE}}"
      cmd    : "{{{init.ubuntuBionic.buildJE}}}"
      copyCmd: "{{{$t init.ubuntuBionic.copyJE this}}}"
      testCmd: "{{{$t init.ubuntuBionic.testJE this}}}"
  - Build lib
  - Test lib
  args:
    name: buildUbuntuBionicJE

# ---------------------------
- name: Build Ubuntu Focal TC
  from:
  - (pass    ):
      image  : "{{init.ubuntuFocal.imageTC}}"
      cmd    : "{{{init.ubuntuFocal.buildTC}}}"
      copyCmd: "{{{$t init.ubuntuFocal.copyTC this}}}"
      testCmd: "{{{$t init.ubuntuFocal.testTC this}}}"
  - Build lib
  - Test lib
  args:
    name: buildUbuntuFocalTC

# ---------------------------
- name: Build Ubuntu Focal JE
  from:
  - (pass    ):
      image  : "{{init.ubuntuFocal.imageJE}}"
      cmd    : "{{{init.ubuntuFocal.buildJE}}}"
      copyCmd: "{{{$t init.ubuntuFocal.copyJE this}}}"
      testCmd: "{{{$t init.ubuntuFocal.testJE this}}}"
  - Build lib
  - Test lib
  args:
    name: buildUbuntuFocalJE

# -----------------------
- name: Build Oracle 8 TC
  from:
  - (pass    ):
      image  : "{{init.oracle8.imageTC}}"
      cmd    : "{{{init.oracle8.buildTC}}}"
      copyCmd: "{{{$t init.oracle8.copyTC this}}}"
      testCmd: "{{{$t init.oracle8.testTC this}}}"
  - Build lib
  - Test lib
  args:
    name: buildOracle8TC

# -----------------------
- name: Build Oracle 8 JE
  from:
  - (pass    ):
      image  : "{{init.oracle8.imageJE}}"
      cmd    : "{{{init.oracle8.buildJE}}}"
      copyCmd: "{{{$t init.oracle8.copyJE this}}}"
      testCmd: "{{{$t init.oracle8.testJE this}}}"
  - Build lib
  - Test lib
  args:
    name: buildOracle8JE

# -----------------------
- name: Build Oracle 8 MI
  from:
  - (pass    ):
      image  : "{{init.oracle8.imageMI}}"
      cmd    : "{{{init.oracle8.buildMI}}}"
      copyCmd: "{{{$t init.oracle8.copyMI this}}}"
      testCmd: "{{{$t init.oracle8.testMI this}}}"
  - Build lib
  - Test lib
  args:
    name: buildOracle8MI

# -----------------------
- name: Build Oracle 7 TC
  from:
  - (pass    ):
      image  : "{{init.oracle7.imageTC}}"
      cmd    : "{{{init.oracle7.buildTC}}}"
      copyCmd: "{{{$t init.oracle7.copyTC this}}}"
      testCmd: "{{{$t init.oracle7.testTC this}}}"
  - Build lib
  - Test lib
  args:
    name: buildOracle8TC

# -----------------------
- name: Build Oracle 7 JE
  from:
  - (pass    ):
      image  : "{{init.oracle7.imageJE}}"
      cmd    : "{{{init.oracle7.buildJE}}}"
      copyCmd: "{{{$t init.oracle7.copyJE this}}}"
      testCmd: "{{{$t init.oracle7.testJE this}}}"
  - Build lib
  - Test lib
  args:
    name: buildOracle7JE

# -----------------------
- name: Build Oracle 9 TC
  from:
  - (pass    ):
      image  : "{{init.oracle9.imageTC}}"
      cmd    : "{{{init.oracle9.buildTC}}}"
      copyCmd: "{{{$t init.oracle9.copyTC this}}}"
      testCmd: "{{{$t init.oracle9.testTC this}}}"
  - Build lib
  - Test lib
  args:
    name: buildOracle9TC

# -----------------------
- name: Build Oracle 9 JE
  from:
  - (pass    ):
      image  : "{{init.oracle9.imageJE}}"
      cmd    : "{{{init.oracle9.buildJE}}}"
      copyCmd: "{{{$t init.oracle9.copyJE this}}}"
      testCmd: "{{{$t init.oracle9.testJE this}}}"
  - Build lib
  - Test lib
  args:
    name: buildOracle9JE

# -----------------------
- name: Build Oracle 9 MI
  from:
  - (pass    ):
      image  : "{{init.oracle9.imageMI}}"
      cmd    : "{{{init.oracle9.buildMI}}}"
      copyCmd: "{{{$t init.oracle9.copyMI this}}}"
      testCmd: "{{{$t init.oracle9.testMI this}}}"
  - Build lib
  - Test lib
  args:
    name: buildOracle9MI

# ------------------
- name: Build UBI 9 JE
  from:
  - (pass    ):
      image  : "{{init.ubi9.imageJE}}"
      cmd    : "{{{init.ubi9.buildJE}}}"
      copyCmd: "{{{$t init.ubi9.copyJE this}}}"
      testCmd: "{{{$t init.ubi9.testJE this}}}"
  - Build lib
  - Test lib
  args:
    name: buildUBI9JE

# --------------------
- name: Build UBI 9 MI
  from:
  - (pass    ):
      image  : "{{init.ubi9.imageMI}}"
      cmd    : "{{{init.ubi9.buildMI}}}"
      copyCmd: "{{{$t init.ubi9.copyMI this}}}"
      testCmd: "{{{$t init.ubi9.testMI this}}}"
  - Build lib
  - Test lib
  args:
    name: buildUBI9MI

# --------------------
- name: Build UBI 8 JE
  from:
  - (pass    ):
      image  : "{{init.ubi8.imageJE}}"
      cmd    : "{{{init.ubi8.buildJE}}}"
      copyCmd: "{{{$t init.ubi8.copyJE this}}}"
      testCmd: "{{{$t init.ubi8.testJE this}}}"
  - Build lib
  - Test lib
  args:
    name: buildUBI8JE

# --------------------
- name: Build UBI 8 MI
  from:
  - (pass    ):
      image  : "{{init.ubi8.imageMI}}"
      cmd    : "{{{init.ubi8.buildMI}}}"
      copyCmd: "{{{$t init.ubi8.copyMI this}}}"
      testCmd: "{{{$t init.ubi8.testMI this}}}"
  - Build lib
  - Test lib
  args:
    name: buildUBI8MI

# --------------------
- name: Build UBI 7 JE
  from:
  - (pass    ):
      image  : "{{init.ubi7.imageJE}}"
      cmd    : "{{{init.ubi7.buildJE}}}"
      copyCmd: "{{{$t init.ubi7.copyJE this}}}"
      testCmd: "{{{$t init.ubi7.testJE this}}}"
  - Build lib
  - Test lib
  args:
    name: buildUBI7JE

# ------------------
- name: Build UBI 9 TC
  from:
  - (pass    ):
      image  : "{{init.ubi9.imageTC}}"
      cmd    : "{{{init.ubi9.buildTC}}}"
      copyCmd: "{{{$t init.ubi9.copyTC this}}}"
      testCmd: "{{{$t init.ubi9.testTC this}}}"
  - Build lib
  - Test lib
  args:
    name: buildUBI9TC

# --------------------
- name: Build UBI 8 TC
  from:
  - (pass    ):
      image  : "{{init.ubi8.imageTC}}"
      cmd    : "{{{init.ubi8.buildTC}}}"
      copyCmd: "{{{$t init.ubi8.copyTC this}}}"
      testCmd: "{{{$t init.ubi8.testTC this}}}"
  - Build lib
  - Test lib
  args:
    name: buildUBI8TC

# ---------------------
- name: Build Alpine JE
  from:
  - (pass    ):
      image  : "{{init.alpine.imageJE}}"
      cmd    : "{{{init.alpine.buildJE}}}"
      copyCmd: "{{{$t init.alpine.copyJE this}}}"
      testCmd: "{{{$t init.alpine.testJE this}}}"
  - Build lib
  - Test lib
  args:
    name: buildAlpineJE

# ---------------------
- name: Build Alpine TC
  from:
  - (pass    ):
      image  : "{{init.alpine.imageTC}}"
      cmd    : "{{{init.alpine.buildTC}}}"
      copyCmd: "{{{$t init.alpine.copyTC this}}}"
      testCmd: "{{{$t init.alpine.testTC this}}}"
  - Build lib
  - Test lib
  args:
    name: buildAlpineTC

# ---------------------
- name: Build Alpine MI
  from:
  - (pass    ):
      image  : "{{init.alpine.imageMI}}"
      cmd    : "{{{init.alpine.buildMI}}}"
      copyCmd: "{{{$t init.alpine.copyMI this}}}"
      testCmd: "{{{$t init.alpine.testMI this}}}"
  - Build lib
  - Test lib
  args:
    name: buildAlpineMI